"use client"

import { useState } from "react"
import Link from "next/link"
import { ArrowLeft, FileText, Shield } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"

export default function CategoryPage({ params }: { params: { category: string } }) {
  const category = params.category.toUpperCase()

  const notes = [
    { id: "1", title: `${category} Cheatsheet`, description: "Common commands and techniques", type: "Cheatsheet" },
    { id: "2", title: "Nessus Configuration", description: "Setup and configuration guide", type: "Configuration" },
    { id: "3", title: `${category} Methodology`, description: "Step-by-step testing methodology", type: "Walkthrough" },
    {
      id: "4",
      title: "Common Vulnerabilities",
      description: `Frequently found ${category} vulnerabilities`,
      type: "Cheatsheet",
    },
  ]

  const [filter, setFilter] = useState("")
  const [typeFilter, setTypeFilter] = useState<string | null>(null)

  const filteredNotes = notes.filter(
    (note) => note.title.toLowerCase().includes(filter.toLowerCase()) && (!typeFilter || note.type === typeFilter),
  )

  const types = Array.from(new Set(notes.map((note) => note.type)))

  const getBadgeClass = (type: string) => {
    switch (type) {
      case "Cheatsheet":
        return "bg-blue-500/10 text-blue-500 border-blue-500/20"
      case "Configuration":
        return "bg-amber-500/10 text-amber-500 border-amber-500/20"
      case "Walkthrough":
        return "bg-green-500/10 text-green-500 border-green-500/20"
      default:
        return "bg-gray-500/10 text-gray-500 border-gray-500/20"
    }
  }

  const getStatusBadgeClass = (status: string) => {
    switch (status) {
      case "Installed":
        return "bg-green-500/10 text-green-500 border-green-500/20"
      case "Update Available":
        return "bg-amber-500/10 text-amber-500 border-amber-500/20"
      default:
        return "bg-gray-500/10 text-gray-500 border-gray-500/20"
    }
  }

  return (
    <div className="flex min-h-screen flex-col bg-background text-foreground">
      <header className="border-b">
        <div className="container mx-auto flex h-16 items-center px-4">
          <Link href="/" className="flex items-center gap-2 font-bold text-xl">
            <Shield className="h-6 w-6" />
            <span>CyberSec Hub</span>
          </Link>
        </div>
      </header>
      <main className="flex-1 container mx-auto px-4 py-6">
        <div className="mb-6 flex items-center gap-2">
          <Link href="/pentest">
            <Button variant="outline" size="sm">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Categories
            </Button>
          </Link>
          <h1 className="text-2xl font-bold">{category} Notes</h1>
        </div>

        <div className="mb-4 flex gap-4">
          <Input
            placeholder="Filter notes..."
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            className="max-w-sm"
          />
          <div className="flex gap-2">
            {types.map((type) => (
              <button
                key={type}
                className={`px-2 py-1 text-xs font-medium rounded-full border ${getBadgeClass(type)} ${typeFilter === type ? "ring-2 ring-offset-2" : ""}`}
                onClick={() => setTypeFilter(typeFilter === type ? null : type)}
              >
                {type}
              </button>
            ))}
          </div>
        </div>

        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {filteredNotes.map((note) => (
            <Card key={note.id}>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  {note.title}
                </CardTitle>
                <CardDescription>{note.description}</CardDescription>
              </CardHeader>
              <CardContent>
                <span className={`px-2 py-1 text-xs font-medium rounded-full border ${getBadgeClass(note.type)}`}>
                  {note.type}
                </span>
              </CardContent>
              <CardFooter>
                <Link href={`/pentest/${params.category}/${note.id}`} className="w-full">
                  <Button variant="outline" className="w-full">
                    View
                  </Button>
                </Link>
              </CardFooter>
            </Card>
          ))}
        </div>
      </main>
    </div>
  )
}

